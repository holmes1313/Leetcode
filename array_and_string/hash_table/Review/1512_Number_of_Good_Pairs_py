"""
Given an array of integers nums, return the number of good pairs.

A pair (i, j) is called good if nums[i] == nums[j] and i < j.

 

Example 1:

Input: nums = [1,2,3,1,1,3]
Output: 4
Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.
Example 2:

Input: nums = [1,1,1,1]
Output: 6
Explanation: Each pair in the array are good.
Example 3:

Input: nums = [1,2,3]
Output: 0
"""

class Solution(object):
    def numIdenticalPairs2(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        mapping = {}
        output = 0
        for idx, num in enumerate(nums):
            if num in mapping:
                mapping[num].append(idx)
            else:
                mapping[num] = [idx]

        for values in mapping.values():
            count = len(values)
            if count > 1:
                base = 0
                count -= 1
                while count > 0:
                    base += count
                    count -= 1
                output += base
        return output

    def numIdenticalPairs1(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        ans = 0

        for i in range(len(nums) - 1):
            for j in range(i+1, len(nums)):
                if nums[i] == nums[j]:
                    ans += 1

        return ans

    def numIdenticalPairs(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        counts = {}
        ans = 0

        for num in nums:
            if num not in counts:
                counts[num] = 1
            else:
                ans += counts[num]
                counts[num] += 1

        return ans
